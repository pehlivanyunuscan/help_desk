basePath: /
definitions:
  models.CreateFaultReportRequest:
    properties:
      asset:
        type: string
      clock:
        type: integer
      machine_id:
        type: string
      title:
        type: string
      user_description:
        type: string
    type: object
  models.CreateFaultReportSuccess:
    properties:
      message:
        example: Fault report created successfully
        type: string
      report:
        $ref: '#/definitions/models.ReportData'
    type: object
  models.CreateReportError:
    properties:
      error:
        example: Could not create fault report
        type: string
    type: object
  models.FaultReport:
    properties:
      asset:
        type: string
      created_at:
        type: string
      id:
        type: integer
      machine_id:
        type: string
      priority:
        type: string
      reported_by:
        type: string
      timestamp:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_description:
        type: string
    type: object
  models.GetFaultReportSuccess:
    properties:
      data:
        $ref: '#/definitions/models.FaultReport'
      message:
        example: Fault report retrieved successfully
        type: string
    type: object
  models.GetFaultReportsSuccess:
    properties:
      count:
        example: 5
        type: integer
      data:
        items:
          $ref: '#/definitions/models.FaultReport'
        type: array
      message:
        example: Fault reports retrieved successfully
        type: string
    type: object
  models.InvalidCredentialsError:
    properties:
      error:
        example: Invalid credentials
        type: string
    type: object
  models.InvalidRequestError:
    properties:
      error:
        example: Invalid request
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        example: yunus
        type: string
      username:
        example: yunus
        type: string
    type: object
  models.LoginResponse:
    properties:
      expires_at:
        example: "2025-10-03T20:30:00Z"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  models.MissingFieldsError:
    properties:
      error:
        example: Missing required fields
        type: string
    type: object
  models.ParseJSONError:
    properties:
      error:
        example: Cannot parse JSON
        type: string
    type: object
  models.ReportData:
    properties:
      asset:
        example: Conveyor Belt A1
        type: string
      id:
        example: 1
        type: integer
      machine_id:
        example: MCH001
        type: string
      priority:
        example: High
        type: string
      reported_by:
        example: john_doe
        type: string
      timestamp:
        example: "2025-10-03T08:30:00Z"
        type: string
      title:
        example: Machine malfunction
        type: string
      user_description:
        example: Machine stopped working
        type: string
    type: object
  models.ReportNotFoundError:
    properties:
      error:
        example: Fault report not found
        type: string
    type: object
  models.RetrieveReportsError:
    properties:
      error:
        example: Could not retrieve fault reports
        type: string
    type: object
  models.TokenGenerationError:
    properties:
      error:
        example: Could not generate token
        type: string
    type: object
  models.UnauthorizedError:
    properties:
      error:
        example: Unauthorized
        type: string
    type: object
host: 10.67.67.22:3000
info:
  contact:
    email: support@helpdesk.com
    name: API Support
  description: Help Desk API for fault reporting system
  title: Help Desk API
  version: "1.0"
paths:
  /fault-reports:
    get:
      consumes:
      - application/json
      description: Retrieve all fault reports from the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetFaultReportsSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UnauthorizedError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.RetrieveReportsError'
      security:
      - BearerAuth: []
      summary: Get all fault reports
      tags:
      - Fault Reports
    post:
      consumes:
      - application/json
      description: Create a new fault report in the system
      parameters:
      - description: Fault report data
        in: body
        name: fault-report
        required: true
        schema:
          $ref: '#/definitions/models.CreateFaultReportRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreateFaultReportSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.MissingFieldsError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UnauthorizedError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.CreateReportError'
      security:
      - BearerAuth: []
      summary: Create a new fault report
      tags:
      - Fault Reports
  /fault-reports/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific fault report by its ID
      parameters:
      - description: Fault Report ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetFaultReportSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.UnauthorizedError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ReportNotFoundError'
      security:
      - BearerAuth: []
      summary: Get fault report by ID
      tags:
      - Fault Reports
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.InvalidRequestError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.InvalidCredentialsError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.TokenGenerationError'
      summary: User login
      tags:
      - Authentication
securityDefinitions:
  BearerAuth:
    description: 'Enter your JWT token in the format: Bearer <your_token_here>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
